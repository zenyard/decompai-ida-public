# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from decompai_client.models.range import Range
from typing import Optional, Set
from typing_extensions import Self

class Function(BaseModel):
    """
    Function
    """ # noqa: E501
    address: StrictStr = Field(description="Represents a 64-bit address as a 16-character lowercase hexadecimal string.")
    name: StrictStr
    has_known_name: Optional[StrictBool] = False
    inference_seq_number: Optional[StrictInt] = 0
    type: Optional[StrictStr] = 'function'
    code: StrictStr
    ranges: Optional[List[Range]]
    calls: List[StrictStr]
    __properties: ClassVar[List[str]] = ["address", "name", "has_known_name", "inference_seq_number", "type", "code", "ranges", "calls"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['function']):
            raise ValueError("must be one of enum values ('function')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Function from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ranges (list)
        _items = []
        if self.ranges:
            for _item_ranges in self.ranges:
                if _item_ranges:
                    _items.append(_item_ranges.to_dict())
            _dict['ranges'] = _items
        # set to None if ranges (nullable) is None
        # and model_fields_set contains the field
        if self.ranges is None and "ranges" in self.model_fields_set:
            _dict['ranges'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Function from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "name": obj.get("name"),
            "has_known_name": obj.get("has_known_name") if obj.get("has_known_name") is not None else False,
            "inference_seq_number": obj.get("inference_seq_number") if obj.get("inference_seq_number") is not None else 0,
            "type": obj.get("type") if obj.get("type") is not None else 'function',
            "code": obj.get("code"),
            "ranges": [Range.from_dict(_item) for _item in obj["ranges"]] if obj.get("ranges") is not None else None,
            "calls": obj.get("calls")
        })
        return _obj


